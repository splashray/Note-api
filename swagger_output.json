{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Note-Taking API",
    "description": "Documentation for Note-Taking App automatically generated </b> module."
  },
  "servers": [
    {
      "url": "https://note-taking-app-api.onrender.com",
      "description": "Confirmed working well"
    }
  ],
  "tags": [
    {
      "name": "Testing",
      "description": "Check if API is working"
    },
    {
      "name": "Auth",
      "description": "Authentication Endpoints"
    },
    {
      "name": "Notes",
      "description": "Notes Endpoints"
    },
    {
      "name": "Users",
      "description": "All route here are to be accessed by authorized users therefore no id is to be passed to these endpoints. user id is from the authorization header "
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Testing"
        ],
        "summary": "Testing API",
        "description": "Endpoint to check if API is working.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign Up with Form",
        "description": "Endpoint to sign up with form.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "New User has been created."
          },
          "401": {
            "description": "email already in use"
          },
          "422": {
            "description": "user input validation failed"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign In with Form",
        "description": "Endpoint to sign in with form.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "user logged in successfully"
          },
          "400": {
            "description": "A user for this email could not be found!"
          },
          "401": {
            "description": "Wrong password!"
          },
          "422": {
            "description": "user validation failed"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/api/note/": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create Note",
        "description": "Endpoint to create Note.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New Note created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "New Note created failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get All User Note",
        "description": "Endpoint to get All User Note.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limit of notes to be returned",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notes gotten successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Notes gotten failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Delete Notes",
        "description": "Endpoint to delete Notes.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted successfully"
          },
          "204": {
            "description": "Note ID not found"
          },
          "400": {
            "description": "Note ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Note deletion failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/note/{id}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Get A Note",
        "description": "Endpoint to get a Note.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Note"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note gotten successfully"
          },
          "204": {
            "description": "Note ID not found"
          },
          "400": {
            "description": "Note ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Note gotten failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Delete Note",
        "description": "Endpoint to delete Note.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Note"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted successfully"
          },
          "204": {
            "description": "Note ID not found"
          },
          "400": {
            "description": "Note ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Note deletion failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Update A Note",
        "description": "Endpoint to update a Note.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Note"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note updated successfully"
          },
          "204": {
            "description": "Note ID not found"
          },
          "400": {
            "description": "Note ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Note update failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        }
      }
    },
    "/api/user/": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Endpoint to delete a user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "204": {
            "description": "User ID not found"
          },
          "400": {
            "description": "User ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "User deletion failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": "Endpoint to get a user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gotten successfully"
          },
          "204": {
            "description": "User ID not found"
          },
          "400": {
            "description": "User ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "User gotten failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Endpoint to update a user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "204": {
            "description": "User ID not found"
          },
          "400": {
            "description": "User ID required"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "User updated failed"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "splash"
          },
          "email": {
            "type": "string",
            "example": "test@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "2023"
          }
        }
      },
      "Email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@gmail.com"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "ABC of Backend"
          },
          "content": {
            "type": "string",
            "example": "Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci"
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "in": "header"
      }
    }
  }
}